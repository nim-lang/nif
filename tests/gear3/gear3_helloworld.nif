(.nif24)

(stmts
  (type ~6 :Data.0.tesg7afhq1 x . . 2
    (tuple 6
    (fld :a.0.tesg7afhq1 . . ~14,~9
      (i -1) .) 14

    (fld :b.0.tesg7afhq1 . . ~22,~6
      (i -1) .)))

 (type ~6 :Color.0.tesg7afhq1 . . . 2
  (enum ,1
   (efld ~6 :Red.0.tesg7afhq1 . .
    (i -1) +0) 10,1
   (efld ~7 :Blue.0.tesg7afhq1 . .
    (i -1) +1) 21,1
   (efld ~8 :Green.0.tesg7afhq1 . .
    (i -1) +2)))


(type ~21 :bool.0.tesg7afhq1
  (bool) . ~16
  (pragmas 2
   (magic 7 Bool)) 2
  (enum ~18,1
   (efld ~8 :false.0.tesg7afhq1 
    (false) . 
    (bool) +0) ~8,1
   (efld ~7 :true.0.tesg7afhq1 
    (true) . 
    (bool) +1))) 4,3

  (type ~7 :Parent.0.tesg7afhq1 . . . 2
  (object . ~7,1
   (fld :core.0.tesg7afhq1 . . ~2,~6
    (i -1) .))) 8,9
 (type ~6 :Child.0.tesg7afhq1 . . . 2
  (object 10 Parent.0.tesg7afhq1 ~6,1
   (fld :id.0.tesg7afhq1 . . ~2,~9
    (i -1) .) ~6,2
   (fld :name.0.tesg7afhq1 . . ~2,~10
    (i -1) .))) 4,13
 (var :s.0.tesg7afhq1 . . 3 Child.0.tesg7afhq1 .)


(proc 5 :==.0.tesg7afhq1 
  (eq -3) . . 10
  (params 1
   (param :x.0 . . ~9,~7
    (i -1) .) 4
   (param :y.0 . . ~12,~7
    (i -1) .)) 26,~3
  (bool) 28
  (pragmas 2
   (magic 7 "EqI")) . .) ,10
 (proc 5 :<=.0.tesg7afhq1 
  (le -3) . . 10
  (params 1
   (param :x.1 . . ~9,~9
    (i -1) .) 4
   (param :y.1 . . ~12,~9
    (i -1) .)) 26,~5
  (bool) 28
  (pragmas 2
   (magic 7 "LeI")) . .) ,12
 (proc 5 :ifExpr.0.tesg7afhq1 . . . 11
  (params) . . . 2,1
  (stmts 4
   (let :s.0 . . 20,~8
    (bool) 6
    (eq
     (i -1) ~2 +1 3 +1)) 4,1
   (let :s2.0 . . 20,~9
    (bool) 7
    (le
     (i -1) ~2 +1 3 +2))))


  (var :x . . (i +32) +12)
  (var :y . . (i +32) +12)

  (proc :foo.c . . .
  (params
    (param :x . . (i +32) .)
    (param :y . . (i +32) .)) . . .
  (stmts
   (var :x.m . . (i +32) +2)


    (if
      (elif (true)
      (stmts
      )
      )

      (elif (false)
      (stmts
      )
      )
    )

   ))

  (proc :main.c . . . . (i +32) . .
    (stmts
    (var :x.c . . (i +32) +12)

    (asgn x.c +6)


    (call foo.c x.c +5)


    (if
      (elif (true)
      (stmts
        (call foo.c x.c +1))
      )

      (elif (false)
      (stmts
        (call foo.c x.c +2))
      )

      (else
      (stmts
        (call foo.c x.c +2))
      )
    )


    (var :m.c . . (bool) (true))
    (case m.c
    (of
     (ranges (true))
     (stmts
      (call foo.c +1 +2)))
    (of
     (ranges (false))
     (stmts
      (call foo.c +2 +2))))


  (var :foo.c1 . . (i +32) +1)
  (discard foo.c1)

  (call foo.c12.mod1 +1 +2)

  (var :s.frommod1 .. (i +32) x.c12.mod1)
  (var :s2.frommod1 .. (i +32) y.c12.mod1)

)))