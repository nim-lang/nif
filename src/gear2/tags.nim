# Generated by mapping.nim: DO NOT EDIT!

proc nodeKindToTag*(k: TNodeKind): string = 
  case k
  of nkError: "err"
  of nkNone: "err"
  of nkEmpty: "err"
  of nkIdent, nkSym, nkCharLit, nkIntLit, nkInt8Lit, nkInt16Lit, nkInt32Lit, nkInt64Lit, nkUIntLit, nkUInt8Lit, nkUInt16Lit, nkUInt32Lit, nkUInt64Lit, nkFloatLit, nkFloat32Lit, nkFloat64Lit, nkFloat128Lit, nkStrLit, nkRStrLit, nkTripleStrLit: "err"
  of nkNilLit: "nil"
  of nkCommand: "cmd"
  of nkCall: "call"
  of nkCallStrLit: "callstrlit"
  of nkInfix: "infix"
  of nkPrefix: "prefix"
  of nkHiddenCallConv: "hcall"
  of nkExprEqExpr: "vv"
  of nkExprColonExpr: "kv"
  of nkPar: "par"
  of nkObjConstr: "oconstr"
  of nkCurly: "sconstr"
  of nkCurlyExpr: "curlyexpr"
  of nkBracket: "aconstr"
  of nkBracketExpr: "at"
  of nkPragmaBlock, nkPragmaExpr: "pragmaexpr"
  of nkDotExpr: "dot"
  of nkAsgn: "asgn"
  of nkFastAsgn: "fasgn"
  of nkIfExpr, nkIfStmt: "if"
  of nkWhenStmt, nkRecWhen: "when"
  of nkWhileStmt: "while"
  of nkCaseStmt, nkRecCase: "case"
  of nkForStmt: "for"
  of nkDiscardStmt: "discard"
  of nkBreakStmt: "brk"
  of nkReturnStmt: "ret"
  of nkElifBranch, nkElifExpr: "elif"
  of nkElse, nkElseExpr: "else"
  of nkOfBranch: "of"
  of nkCast: "cast"
  of nkLambda: "proc"
  of nkAccQuoted: "quoted"
  of nkTableConstr: "tableconstr"
  of nkStmtList: "stmts"
  of nkRecList: "reclist"
  of nkStmtListType: "stmtListType"
  of nkStmtListExpr: "expr"
  of nkArgList: "arglist"
  of nkBlockStmt: "block"
  of nkBlockExpr: "blockexpr"
  of nkBlockType: "blocktype"
  of nkStaticStmt: "static"
  of nkBind, nkBindStmt: "bind"
  of nkMixinStmt: "mixin"
  of nkAddr: "addr"
  of nkGenericParams: "typevars"
  of nkFormalParams: "params"
  of nkImportAs: "importAs"
  of nkRaiseStmt: "raise"
  of nkContinueStmt: "continue"
  of nkYieldStmt: "yield"
  of nkProcDef: "proc"
  of nkFuncDef: "func"
  of nkMethodDef: "method"
  of nkConverterDef: "converter"
  of nkMacroDef: "macro"
  of nkTemplateDef: "template"
  of nkIteratorDef: "iterator"
  of nkExceptBranch: "except"
  of nkTypeOfExpr: "typeof"
  of nkFinally: "fin"
  of nkTryStmt: "try"
  of nkImportStmt: "import"
  of nkImportExceptStmt: "importexcept"
  of nkIncludeStmt: "include"
  of nkExportStmt: "export"
  of nkExportExceptStmt: "exportexcept"
  of nkFromStmt: "from"
  of nkPragma: "pragmas"
  of nkAsmStmt: "asm"
  of nkDefer: "defer"
  of nkUsingStmt: "using"
  of nkCommentStmt: "comment"
  of nkObjectTy: "object"
  of nkTupleTy, nkTupleClassTy: "tuple"
  of nkTypeClassTy: "concept"
  of nkStaticTy: "stat"
  of nkRefTy: "ref"
  of nkPtrTy: "ptr"
  of nkVarTy: "mut"
  of nkDistinctTy: "distinct"
  of nkIteratorTy: "itert"
  of nkEnumTy: "enum"
  of nkTupleConstr: "tupleconstr"
  of nkOutTy: "out"
  of nkType: "err"
  of nkComesFrom: "comesfrom"
  of nkDotCall: "dotcall"
  of nkPostfix: "postfix"
  of nkIdentDefs: "err"
  of nkVarTuple: "unpackdecl"
  of nkRange: "range"
  of nkCheckedFieldExpr: "xdot"
  of nkDerefExpr: "deref"
  of nkDo: "do"
  of nkClosedSymChoice: "cchoice"
  of nkOpenSymChoice: "ochoice"
  of nkHiddenStdConv: "hstdconv"
  of nkHiddenSubConv: "hsubconv"
  of nkConv: "conv"
  of nkStaticExpr: "static"
  of nkHiddenAddr: "haddr"
  of nkHiddenDeref: "hderef"
  of nkObjDownConv: "downconv"
  of nkObjUpConv: "upconv"
  of nkChckRangeF: "xrangef"
  of nkChckRange64: "xrange64"
  of nkChckRange: "xrange"
  of nkStringToCString: "tocstr"
  of nkCStringToString: "tostr"
  of nkOfInherit: "ofh"
  of nkParForStmt: "parfor"
  of nkTypeSection, nkVarSection, nkLetSection, nkConstSection: "err"
  of nkConstDef: "const"
  of nkTypeDef: "type"
  of nkWith: "with"
  of nkWithout: "without"
  of nkConstTy: "ro"
  of nkProcTy: "proctype"
  of nkSinkAsgn: "snk"
  of nkEnumFieldDef: "efld"
  of nkPattern: "trpattern"
  of nkHiddenTryStmt: "htry"
  of nkClosure: "closure"
  of nkGotoState: "gotostate"
  of nkState: "state"
  of nkBreakState: "brstate"
  of nkModuleRef: "modref"
  of nkReplayAction: "replay"
  of nkNilRodNode: "nilrod"

proc magicToTag*(k: TMagic): string = 
  case k
  of mNone: "err"
  of mDefined: "defined"
  of mDeclared: "declared"
  of mDeclaredInScope: "declaredInScope"
  of mCompiles: "compiles"
  of mArrGet: "arrGet"
  of mArrPut: "arrPut"
  of mAsgn: "asgn"
  of mLow: "low"
  of mHigh: "high"
  of mSizeOf: "sizeof"
  of mAlignOf: "alignof"
  of mOffsetOf: "offsetof"
  of mTypeTrait: "typetrait"
  of mIs: "is"
  of mOf: "objof"
  of mAddr: "addr"
  of mTypeOf, mType: "typeOf"
  of mPlugin: "plugin"
  of mEcho: "echo"
  of mShallowCopy: "shallowCopy"
  of mSlurp: "slurp"
  of mStaticExec: "staticExec"
  of mStatic: "static"
  of mParseExprToAst: "parseExpr"
  of mParseStmtToAst: "parseStmt"
  of mExpandToAst: "expandToAst"
  of mQuoteAst: "quote"
  of mInc: "inc"
  of mDec: "dec"
  of mOrd: "ord"
  of mNew: "new"
  of mNewFinalize: "newFinalize"
  of mNewSeq: "newSeq"
  of mNewSeqOfCap: "newSeqOfCap"
  of mLengthSeq, mLengthOpenArray, mLengthStr, mLengthArray: "len"
  of mIncl: "incl"
  of mExcl: "excl"
  of mCard: "card"
  of mChr: "chr"
  of mGCref: "GCref"
  of mGCunref: "GCunref"
  of mAddI: "add"
  of mSubI: "sub"
  of mMulI: "mul"
  of mDivI: "div"
  of mModI: "mod"
  of mSucc: "succ"
  of mPred: "pred"
  of mAddF64: "addf"
  of mSubF64: "subf"
  of mMulF64: "mulf"
  of mDivF64: "divf"
  of mShrI: "shr"
  of mShlI: "shl"
  of mAshrI: "ashr"
  of mBitandI: "bitand"
  of mBitorI: "bitor"
  of mBitxorI: "bitxor"
  of mMinI: "min"
  of mMaxI: "max"
  of mAddU: "addu"
  of mSubU: "subu"
  of mMulU: "mulu"
  of mDivU: "divu"
  of mModU: "modu"
  of mEqI: "eq"
  of mLeI: "le"
  of mLtI: "lt"
  of mEqF64: "eqf"
  of mLeF64: "lef"
  of mLtF64: "ltf"
  of mLeU: "leu"
  of mLtU: "ltu"
  of mEqEnum: "eqe"
  of mLeEnum: "lee"
  of mLtEnum: "lte"
  of mEqCh: "eqc"
  of mLeCh: "lec"
  of mLtCh: "ltc"
  of mEqB: "eqb"
  of mLeB: "leb"
  of mLtB: "ltb"
  of mEqRef: "eqr"
  of mLePtr: "lep"
  of mLtPtr: "ltp"
  of mXor: "xor"
  of mEqCString: "eqcs"
  of mEqProc: "eqproc"
  of mUnaryMinusI: "neg"
  of mUnaryMinusI64: "neg"
  of mAbsI: "abs"
  of mNot: "not"
  of mUnaryPlusI: "unaryplus"
  of mBitnotI: "bitnot"
  of mUnaryPlusF64: "unaryplusf"
  of mUnaryMinusF64: "negf"
  of mCharToStr: "dollarc"
  of mBoolToStr: "dollarb"
  of mCStrToStr: "dollarcs"
  of mStrToStr: "dollarnop"
  of mEnumToStr: "dollare"
  of mAnd: "and"
  of mOr: "or"
  of mImplies: "implies"
  of mIff: "iff"
  of mExists: "exists"
  of mForall: "forall"
  of mOld: "old"
  of mEqStr: "eqs"
  of mLeStr: "les"
  of mLtStr: "lts"
  of mEqSet: "eqset"
  of mLeSet: "leset"
  of mLtSet: "ltset"
  of mMulSet: "mulset"
  of mPlusSet: "addset"
  of mMinusSet: "subset"
  of mConStrStr: "conc"
  of mSlice: "slice"
  of mDotDot: "dotdot"
  of mFields: "fields"
  of mFieldPairs: "fieldPairs"
  of mOmpParFor: "parFor"
  of mAppendStrCh: "addc"
  of mAppendStrStr: "adds"
  of mAppendSeqElem: "adde"
  of mInSet: "contains"
  of mRepr: "repr"
  of mExit: "exit"
  of mSetLengthStr: "setlens"
  of mSetLengthSeq: "setlenq"
  of mIsPartOf: "isPartOf"
  of mAstToStr: "astToStr"
  of mParallel: "parallel"
  of mSwap: "swap"
  of mIsNil: "isnil"
  of mArrToSeq: "arrToSeq"
  of mOpenArrayToSeq: "openArrayToSeq"
  of mNewString: "newString"
  of mNewStringOfCap: "newStringOfCap"
  of mParseBiggestFloat: "parseBiggestFloat"
  of mMove: "move"
  of mEnsureMove: "ensureMove"
  of mWasMoved: "wasMoved"
  of mDup: "dup"
  of mDestroy: "destroy"
  of mTrace: "trace"
  of mDefault: "default"
  of mUnown: "unown"
  of mFinished: "finished"
  of mIsolate: "isolate"
  of mAccessEnv: "accessEnv"
  of mAccessTypeField: "accessTypeField"
  of mArray: "array"
  of mOpenArray: "oarray"
  of mRange: "range"
  of mSet: "set"
  of mSeq: "seq"
  of mVarargs: "varargs"
  of mRef: "ref"
  of mPtr: "ptr"
  of mVar: "mut"
  of mDistinct: "distinct"
  of mVoid, mVoidType: "void"
  of mTuple: "tuple"
  of mOrdinal: "ordinal"
  of mIterableType: "iterable"
  of mInt: "i"
  of mInt8: "i"
  of mInt16: "i"
  of mInt32: "i"
  of mInt64: "i"
  of mUInt: "u"
  of mUInt8: "u"
  of mUInt16: "u"
  of mUInt32: "u"
  of mUInt64: "u"
  of mFloat: "f"
  of mFloat32: "f"
  of mFloat64: "f"
  of mFloat128: "f"
  of mBool: "bool"
  of mChar: "char"
  of mString: "string"
  of mCstring: "cstring"
  of mPointer: "pointer"
  of mNil: "nil"
  of mExpr: "expr"
  of mStmt: "stmt"
  of mTypeDesc: "typedesc"
  of mPNimrodNode: "nimNode"
  of mSpawn: "spawn"
  of mDeepCopy: "deepcopy"
  of mIsMainModule: "isMainModule"
  of mCompileDate: "compileDate"
  of mCompileTime: "compileTime"
  of mProcCall: "procCall"
  of mCpuEndian: "cpuEndian"
  of mHostOS: "hostOS"
  of mHostCPU: "hostCPU"
  of mBuildOS: "buildOS"
  of mBuildCPU: "buildCPU"
  of mAppType: "appType"
  of mCompileOption: "compileOption"
  of mCompileOptionArg: "compileOptionArg"
  of mNLen: "nLen"
  of mNChild: "nChild"
  of mNSetChild: "nSetChild"
  of mNAdd: "nAdd"
  of mNAddMultiple: "nAddMultiple"
  of mNDel: "nDel"
  of mNKind: "nKind"
  of mNSymKind: "nSymKind"
  of mNccValue: "nccValue"
  of mNccInc: "nccInc"
  of mNcsAdd: "ncsAdd"
  of mNcsIncl: "ncsIncl"
  of mNcsLen: "ncsLen"
  of mNcsAt: "ncsAt"
  of mNctPut: "nctPut"
  of mNctLen: "nctLen"
  of mNctGet: "nctGet"
  of mNctHasNext: "nctHasNext"
  of mNctNext: "nctNext"
  of mNIntVal: "nIntVal"
  of mNFloatVal: "nFloatVal"
  of mNSymbol: "nSymbol"
  of mNIdent: "nIdent"
  of mNGetType: "nGetType"
  of mNStrVal: "nStrVal"
  of mNSetIntVal: "nSetIntVal"
  of mNSetFloatVal: "nSetFloatVal"
  of mNSetSymbol: "nSetSymbol"
  of mNSetIdent: "nSetIdent"
  of mNSetStrVal: "nSetStrVal"
  of mNLineInfo: "nLineInfo"
  of mNNewNimNode: "nNewNimNode"
  of mNCopyNimNode: "nCopyNimNode"
  of mNCopyNimTree: "nCopyNimTree"
  of mStrToIdent: "nStrToIdent"
  of mNSigHash: "nSigHash"
  of mNSizeOf: "nSizeOf"
  of mNBindSym: "nBindSym"
  of mNCallSite: "nCallSite"
  of mEqIdent: "eqIdent"
  of mEqNimrodNode: "eqNimNode"
  of mSameNodeType: "sameNodeType"
  of mGetImpl: "getImpl"
  of mNGenSym: "nGenSym"
  of mNHint: "nHint"
  of mNWarning: "nWarning"
  of mNError: "nError"
  of mInstantiationInfo: "instantiationInfo"
  of mGetTypeInfo: "getTypeInfo"
  of mGetTypeInfoV2: "getTypeInfoV2"
  of mNimvm: "nimvm"
  of mIntDefine: "definei"
  of mStrDefine: "defines"
  of mBoolDefine: "defineb"
  of mGenericDefine: "defineg"
  of mRunnableExamples: "runnableExamples"
  of mException: "exception"
  of mBuiltinType: "builtinType"
  of mSymOwner: "symOwner"
  of mUncheckedArray: "uarray"
  of mGetImplTransf: "getImplTransf"
  of mSymIsInstantiationOf: "symIsInstantiationOf"
  of mNodeId: "nodeId"
  of mPrivateAccess: "privateAccess"
  of mZeroDefault: "zeroDefault"

proc typeFlagsToKeyw*(f: TTypeFlags; b: var Builder) = 
  if tfNoSideEffect in f: b.addKeyw "noside"
  if tfFinal in f: b.addKeyw "final"
  if tfInheritable in f: b.addKeyw "inheritable"
  if tfShallow in f: b.addKeyw "shallow"
  if tfThread in f: b.addKeyw "gcsafe"
  if tfByCopy in f: b.addKeyw "bycopy"
  if tfByRef in f: b.addKeyw "byref"
  if tfPartial in f: b.addKeyw "partial"
  if tfNotNil in f: b.addKeyw "notnil"
  if tfRequiresInit in f: b.addKeyw "requiresInit"
  if tfPacked in f: b.addKeyw "packed"
  if tfBorrowDot in f: b.addKeyw "borrowDot"
  if tfCovariant in f: b.addKeyw "covariant"
  if tfWeakCovariant in f: b.addKeyw "weakCovariant"
  if tfContravariant in f: b.addKeyw "contravariant"
  if tfAcyclic in f: b.addKeyw "acyclic"
  if tfIncompleteStruct in f: b.addKeyw "incompleteStruct"
  if tfCompleteStruct in f: b.addKeyw "completeStruct"
  if tfSendable in f: b.addKeyw "sendable"

proc symFlagsToKeyw*(f: TSymFlags; b: var Builder) = 
  if sfGlobal in f: b.addKeyw "global"
  if sfImportc in f: b.addKeyw "importc"
  if sfExportc in f: b.addKeyw "exportc"
  if sfVolatile in f: b.addKeyw "volatile"
  if sfDirty in f: b.addKeyw "dirty"
  if sfGoto in f: b.addKeyw "statemachine"
  if sfBase in f: b.addKeyw "base"
  if sfCustomPragma in f: b.addKeyw "custompragma"
  if sfRegister in f: b.addKeyw "register"
  if sfPure in f: b.addKeyw "pure"
  if sfNoSideEffect in f: b.addKeyw "noside"
  if sfSideEffect in f: b.addKeyw "side"
  if sfNoInit in f: b.addKeyw "noinit"
  if sfNoReturn in f: b.addKeyw "noret"
  if sfCompilerProc in f: b.addKeyw "compilerProc"
  if sfRequiresInit in f: b.addKeyw "requiresInit"
  if sfDeprecated in f: b.addKeyw "deprecated"
  if sfExplain in f: b.addKeyw "explain"
  if sfError in f: b.addKeyw "disabled"
  if sfCppNonPod in f: b.addKeyw "cppNonPod"
  if sfCompileTime in f: b.addKeyw "compileTime"
  if sfConstructor in f: b.addKeyw "cppconstr"
  if sfBorrow in f: b.addKeyw "borrow"
  if sfInfixCall in f: b.addKeyw "cppCall"
  if sfNamedParamCall in f: b.addKeyw "objcCall"
  if sfDiscardable in f: b.addKeyw "discardable"
  if sfOverridden in f: b.addKeyw "overridden"
  if sfCallsite in f: b.addKeyw "callsite"
  if sfGenSym in f: b.addKeyw "genSym"
  if sfNonReloadable in f: b.addKeyw "nonReloadable"
  if sfGeneratedOp in f: b.addKeyw "nodestroy"
  if sfCursor in f: b.addKeyw "cursor"
  if sfNeverRaises in f: b.addKeyw "noraises"
  if sfSystemRaisesDefect in f: b.addKeyw "raisesDefect"
  if sfNoalias in f: b.addKeyw "noalias"
  if sfVirtual in f: b.addKeyw "virtual"
  if sfByCopy in f: b.addKeyw "bycopy"
  if sfMember in f: b.addKeyw "member"
  if sfCodegenDecl in f: b.addKeyw "codegenDecl"

proc optionsToKeyw*(f: TOptions; b: var Builder) = 
  if optObjCheck in f: b.addKeyw "objcheck"
  if optFieldCheck in f: b.addKeyw "fcheck"
  if optRangeCheck in f: b.addKeyw "rcheck"
  if optBoundsCheck in f: b.addKeyw "bcheck"
  if optOverflowCheck in f: b.addKeyw "ofcheck"
  if optRefCheck in f: b.addKeyw "nilcheck"
  if optNaNCheck in f: b.addKeyw "nancheck"
  if optInfCheck in f: b.addKeyw "infcheck"
  if optLineDir in f: b.addKeyw "optLineDir"
  if optOptimizeSpeed in f: b.addKeyw "optspeed"
  if optOptimizeSize in f: b.addKeyw "optsize"
  if optStackTrace in f: b.addKeyw "stackTrace"
  if optLineTrace in f: b.addKeyw "lineTrace"
  if optByRef in f: b.addKeyw "byref"
  if optProfiler in f: b.addKeyw "profile"
  if optQuirky in f: b.addKeyw "quirky"

proc typeKindToTag*(k: TTypeKind): string = 
  case k
  of tyNone: "err"
  of tyBool: "bool"
  of tyChar: "c"
  of tyEmpty: "empty"
  of tyInt: "i"
  of tyInt8: "i"
  of tyInt16: "i"
  of tyInt32: "i"
  of tyInt64: "i"
  of tyUInt: "u"
  of tyUInt8: "u"
  of tyUInt16: "u"
  of tyUInt32: "u"
  of tyUInt64: "u"
  of tyFloat, tyFloat64: "f"
  of tyFloat32: "f"
  of tyFloat128: "f"
  of tyAlias: "err"
  of tyNil: "nilt"
  of tyUntyped: "untyped"
  of tyTyped: "typed"
  of tyTypeDesc: "typedesc"
  of tyGenericParam: "p"
  of tyGenericInst: "inst"
  of tyGenericInvocation: "invok"
  of tyGenericBody: "err"
  of tyDistinct, tyEnum: "err"
  of tyPtr: "ptr"
  of tyRef: "ref"
  of tyVar: "mut"
  of tyAnd: "and"
  of tyOr: "or"
  of tyNot: "not"
  of tyFromExpr: "typeof"
  of tyArray: "array"
  of tyUncheckedArray: "uarray"
  of tySequence: "seq"
  of tyOrdinal: "ordinal"
  of tySet: "set"
  of tyOpenArray: "oarray"
  of tyIterable: "iterable"
  of tyLent: "lent"
  of tyTuple: "tuple"
  of tyRange: "range"
  of tyProc: "proctype"
  of tyVarargs: "varargs"
  of tySink: "sink"
  of tyOwned: "owned"
  of tyVoid: "void"
  of tyPointer: "pointer"
  of tyString: "str"
  of tyCstring: "cstr"
  of tyObject: "err"
  of tyForward: "forward"
  of tyProxy: "err"
  of tyBuiltInTypeClass: "typeclass"
  of tyUserTypeClass, tyConcept: "err"
  of tyUserTypeClassInst: "err"
  of tyCompositeTypeClass: "err"
  of tyInferred: "err"
  of tyAnything: "any"
  of tyStatic: "stat"


const
  Err2* = "err"
  Nil2* = "nil"
  Cmd2* = "cmd"
  Call2* = "call"
  Callstrlit2* = "callstrlit"
  Infix2* = "infix"
  Prefix2* = "prefix"
  Hcall2* = "hcall"
  Vv2* = "vv"
  Kv2* = "kv"
  Par2* = "par"
  Oconstr2* = "oconstr"
  Sconstr2* = "sconstr"
  Curlyexpr2* = "curlyexpr"
  Aconstr2* = "aconstr"
  At2* = "at"
  Pragmaexpr2* = "pragmaexpr"
  Dot2* = "dot"
  Asgn2* = "asgn"
  Fasgn2* = "fasgn"
  If2* = "if"
  When2* = "when"
  While2* = "while"
  Case2* = "case"
  For2* = "for"
  Discard2* = "discard"
  Brk2* = "brk"
  Ret2* = "ret"
  Elif2* = "elif"
  Else2* = "else"
  Of2* = "of"
  Cast2* = "cast"
  Proc2* = "proc"
  Quoted2* = "quoted"
  Tableconstr2* = "tableconstr"
  Stmts2* = "stmts"
  Reclist2* = "reclist"
  StmtListType2* = "stmtListType"
  Expr2* = "expr"
  Arglist2* = "arglist"
  Block2* = "block"
  Blockexpr2* = "blockexpr"
  Blocktype2* = "blocktype"
  Static2* = "static"
  Bind2* = "bind"
  Mixin2* = "mixin"
  Addr2* = "addr"
  Typevars2* = "typevars"
  Params2* = "params"
  ImportAs2* = "importAs"
  Raise2* = "raise"
  Continue2* = "continue"
  Yield2* = "yield"
  Func2* = "func"
  Method2* = "method"
  Converter2* = "converter"
  Macro2* = "macro"
  Template2* = "template"
  Iterator2* = "iterator"
  Except2* = "except"
  Typeof2* = "typeof"
  Fin2* = "fin"
  Try2* = "try"
  Import2* = "import"
  Importexcept2* = "importexcept"
  Include2* = "include"
  Export2* = "export"
  Exportexcept2* = "exportexcept"
  From2* = "from"
  Pragmas2* = "pragmas"
  Asm2* = "asm"
  Defer2* = "defer"
  Using2* = "using"
  Comment2* = "comment"
  Object2* = "object"
  Tuple2* = "tuple"
  Concept2* = "concept"
  Stat2* = "stat"
  Ref2* = "ref"
  Ptr2* = "ptr"
  Mut2* = "mut"
  Distinct2* = "distinct"
  Itert2* = "itert"
  Enum2* = "enum"
  Tupleconstr2* = "tupleconstr"
  Out2* = "out"
  Comesfrom2* = "comesfrom"
  Dotcall2* = "dotcall"
  Postfix2* = "postfix"
  Unpackdecl2* = "unpackdecl"
  Range2* = "range"
  Xdot2* = "xdot"
  Deref2* = "deref"
  Do2* = "do"
  Cchoice2* = "cchoice"
  Ochoice2* = "ochoice"
  Hstdconv2* = "hstdconv"
  Hsubconv2* = "hsubconv"
  Conv2* = "conv"
  Haddr2* = "haddr"
  Hderef2* = "hderef"
  Downconv2* = "downconv"
  Upconv2* = "upconv"
  Xrangef2* = "xrangef"
  Xrange642* = "xrange64"
  Xrange2* = "xrange"
  Tocstr2* = "tocstr"
  Tostr2* = "tostr"
  Ofh2* = "ofh"
  Parfor2* = "parfor"
  Const2* = "const"
  Type2* = "type"
  With2* = "with"
  Without2* = "without"
  Ro2* = "ro"
  Proctype2* = "proctype"
  Snk2* = "snk"
  Efld2* = "efld"
  Trpattern2* = "trpattern"
  Htry2* = "htry"
  Closure2* = "closure"
  Gotostate2* = "gotostate"
  State2* = "state"
  Brstate2* = "brstate"
  Modref2* = "modref"
  Replay2* = "replay"
  Nilrod2* = "nilrod"
  Defined2* = "defined"
  Declared2* = "declared"
  DeclaredInScope2* = "declaredInScope"
  Compiles2* = "compiles"
  ArrGet2* = "arrGet"
  ArrPut2* = "arrPut"
  Low2* = "low"
  High2* = "high"
  Sizeof2* = "sizeof"
  Alignof2* = "alignof"
  Offsetof2* = "offsetof"
  Typetrait2* = "typetrait"
  Is2* = "is"
  Objof2* = "objof"
  TypeOf2* = "typeOf"
  Plugin2* = "plugin"
  Echo2* = "echo"
  ShallowCopy2* = "shallowCopy"
  Slurp2* = "slurp"
  StaticExec2* = "staticExec"
  ParseExpr2* = "parseExpr"
  ParseStmt2* = "parseStmt"
  ExpandToAst2* = "expandToAst"
  Quote2* = "quote"
  Inc2* = "inc"
  Dec2* = "dec"
  Ord2* = "ord"
  New2* = "new"
  NewFinalize2* = "newFinalize"
  NewSeq2* = "newSeq"
  NewSeqOfCap2* = "newSeqOfCap"
  Len2* = "len"
  Incl2* = "incl"
  Excl2* = "excl"
  Card2* = "card"
  Chr2* = "chr"
  GCref2* = "GCref"
  GCunref2* = "GCunref"
  Add2* = "add"
  Sub2* = "sub"
  Mul2* = "mul"
  Div2* = "div"
  Mod2* = "mod"
  Succ2* = "succ"
  Pred2* = "pred"
  Addf2* = "addf"
  Subf2* = "subf"
  Mulf2* = "mulf"
  Divf2* = "divf"
  Shr2* = "shr"
  Shl2* = "shl"
  Ashr2* = "ashr"
  Bitand2* = "bitand"
  Bitor2* = "bitor"
  Bitxor2* = "bitxor"
  Min2* = "min"
  Max2* = "max"
  Addu2* = "addu"
  Subu2* = "subu"
  Mulu2* = "mulu"
  Divu2* = "divu"
  Modu2* = "modu"
  Eq2* = "eq"
  Le2* = "le"
  Lt2* = "lt"
  Eqf2* = "eqf"
  Lef2* = "lef"
  Ltf2* = "ltf"
  Leu2* = "leu"
  Ltu2* = "ltu"
  Eqe2* = "eqe"
  Lee2* = "lee"
  Lte2* = "lte"
  Eqc2* = "eqc"
  Lec2* = "lec"
  Ltc2* = "ltc"
  Eqb2* = "eqb"
  Leb2* = "leb"
  Ltb2* = "ltb"
  Eqr2* = "eqr"
  Lep2* = "lep"
  Ltp2* = "ltp"
  Xor2* = "xor"
  Eqcs2* = "eqcs"
  Eqproc2* = "eqproc"
  Neg2* = "neg"
  Abs2* = "abs"
  Not2* = "not"
  Unaryplus2* = "unaryplus"
  Bitnot2* = "bitnot"
  Unaryplusf2* = "unaryplusf"
  Negf2* = "negf"
  Dollarc2* = "dollarc"
  Dollarb2* = "dollarb"
  Dollarcs2* = "dollarcs"
  Dollarnop2* = "dollarnop"
  Dollare2* = "dollare"
  And2* = "and"
  Or2* = "or"
  Implies2* = "implies"
  Iff2* = "iff"
  Exists2* = "exists"
  Forall2* = "forall"
  Old2* = "old"
  Eqs2* = "eqs"
  Les2* = "les"
  Lts2* = "lts"
  Eqset2* = "eqset"
  Leset2* = "leset"
  Ltset2* = "ltset"
  Mulset2* = "mulset"
  Addset2* = "addset"
  Subset2* = "subset"
  Conc2* = "conc"
  Slice2* = "slice"
  Dotdot2* = "dotdot"
  Fields2* = "fields"
  FieldPairs2* = "fieldPairs"
  ParFor2* = "parFor"
  Addc2* = "addc"
  Adds2* = "adds"
  Adde2* = "adde"
  Contains2* = "contains"
  Repr2* = "repr"
  Exit2* = "exit"
  Setlens2* = "setlens"
  Setlenq2* = "setlenq"
  IsPartOf2* = "isPartOf"
  AstToStr2* = "astToStr"
  Parallel2* = "parallel"
  Swap2* = "swap"
  Isnil2* = "isnil"
  ArrToSeq2* = "arrToSeq"
  OpenArrayToSeq2* = "openArrayToSeq"
  NewString2* = "newString"
  NewStringOfCap2* = "newStringOfCap"
  ParseBiggestFloat2* = "parseBiggestFloat"
  Move2* = "move"
  EnsureMove2* = "ensureMove"
  WasMoved2* = "wasMoved"
  Dup2* = "dup"
  Destroy2* = "destroy"
  Trace2* = "trace"
  Default2* = "default"
  Unown2* = "unown"
  Finished2* = "finished"
  Isolate2* = "isolate"
  AccessEnv2* = "accessEnv"
  AccessTypeField2* = "accessTypeField"
  Array2* = "array"
  Oarray2* = "oarray"
  Set2* = "set"
  Seq2* = "seq"
  Varargs2* = "varargs"
  Void2* = "void"
  Ordinal2* = "ordinal"
  Iterable2* = "iterable"
  I2* = "i"
  U2* = "u"
  F2* = "f"
  Bool2* = "bool"
  Char2* = "char"
  String2* = "string"
  Cstring2* = "cstring"
  Pointer2* = "pointer"
  Stmt2* = "stmt"
  Typedesc2* = "typedesc"
  NimNode2* = "nimNode"
  Spawn2* = "spawn"
  Deepcopy2* = "deepcopy"
  IsMainModule2* = "isMainModule"
  CompileDate2* = "compileDate"
  CompileTime2* = "compileTime"
  ProcCall2* = "procCall"
  CpuEndian2* = "cpuEndian"
  HostOS2* = "hostOS"
  HostCPU2* = "hostCPU"
  BuildOS2* = "buildOS"
  BuildCPU2* = "buildCPU"
  AppType2* = "appType"
  CompileOption2* = "compileOption"
  CompileOptionArg2* = "compileOptionArg"
  NLen2* = "nLen"
  NChild2* = "nChild"
  NSetChild2* = "nSetChild"
  NAdd2* = "nAdd"
  NAddMultiple2* = "nAddMultiple"
  NDel2* = "nDel"
  NKind2* = "nKind"
  NSymKind2* = "nSymKind"
  NccValue2* = "nccValue"
  NccInc2* = "nccInc"
  NcsAdd2* = "ncsAdd"
  NcsIncl2* = "ncsIncl"
  NcsLen2* = "ncsLen"
  NcsAt2* = "ncsAt"
  NctPut2* = "nctPut"
  NctLen2* = "nctLen"
  NctGet2* = "nctGet"
  NctHasNext2* = "nctHasNext"
  NctNext2* = "nctNext"
  NIntVal2* = "nIntVal"
  NFloatVal2* = "nFloatVal"
  NSymbol2* = "nSymbol"
  NIdent2* = "nIdent"
  NGetType2* = "nGetType"
  NStrVal2* = "nStrVal"
  NSetIntVal2* = "nSetIntVal"
  NSetFloatVal2* = "nSetFloatVal"
  NSetSymbol2* = "nSetSymbol"
  NSetIdent2* = "nSetIdent"
  NSetStrVal2* = "nSetStrVal"
  NLineInfo2* = "nLineInfo"
  NNewNimNode2* = "nNewNimNode"
  NCopyNimNode2* = "nCopyNimNode"
  NCopyNimTree2* = "nCopyNimTree"
  NStrToIdent2* = "nStrToIdent"
  NSigHash2* = "nSigHash"
  NSizeOf2* = "nSizeOf"
  NBindSym2* = "nBindSym"
  NCallSite2* = "nCallSite"
  EqIdent2* = "eqIdent"
  EqNimNode2* = "eqNimNode"
  SameNodeType2* = "sameNodeType"
  GetImpl2* = "getImpl"
  NGenSym2* = "nGenSym"
  NHint2* = "nHint"
  NWarning2* = "nWarning"
  NError2* = "nError"
  InstantiationInfo2* = "instantiationInfo"
  GetTypeInfo2* = "getTypeInfo"
  GetTypeInfoV22* = "getTypeInfoV2"
  Nimvm2* = "nimvm"
  Definei2* = "definei"
  Defines2* = "defines"
  Defineb2* = "defineb"
  Defineg2* = "defineg"
  RunnableExamples2* = "runnableExamples"
  Exception2* = "exception"
  BuiltinType2* = "builtinType"
  SymOwner2* = "symOwner"
  Uarray2* = "uarray"
  GetImplTransf2* = "getImplTransf"
  SymIsInstantiationOf2* = "symIsInstantiationOf"
  NodeId2* = "nodeId"
  PrivateAccess2* = "privateAccess"
  ZeroDefault2* = "zeroDefault"
  C2* = "c"
  Empty2* = "empty"
  Nilt2* = "nilt"
  Untyped2* = "untyped"
  Typed2* = "typed"
  P2* = "p"
  Inst2* = "inst"
  Invok2* = "invok"
  Lent2* = "lent"
  Sink2* = "sink"
  Owned2* = "owned"
  Str2* = "str"
  Cstr2* = "cstr"
  Forward2* = "forward"
  Typeclass2* = "typeclass"
  Any2* = "any"
  Noside2* = "noside"
  Final2* = "final"
  Inheritable2* = "inheritable"
  Shallow2* = "shallow"
  Gcsafe2* = "gcsafe"
  Bycopy2* = "bycopy"
  Byref2* = "byref"
  Partial2* = "partial"
  Notnil2* = "notnil"
  RequiresInit2* = "requiresInit"
  Packed2* = "packed"
  BorrowDot2* = "borrowDot"
  Covariant2* = "covariant"
  WeakCovariant2* = "weakCovariant"
  Contravariant2* = "contravariant"
  Acyclic2* = "acyclic"
  IncompleteStruct2* = "incompleteStruct"
  CompleteStruct2* = "completeStruct"
  Sendable2* = "sendable"
  Global2* = "global"
  Importc2* = "importc"
  Exportc2* = "exportc"
  Volatile2* = "volatile"
  Dirty2* = "dirty"
  Statemachine2* = "statemachine"
  Base2* = "base"
  Custompragma2* = "custompragma"
  Register2* = "register"
  Pure2* = "pure"
  Side2* = "side"
  Noinit2* = "noinit"
  Noret2* = "noret"
  CompilerProc2* = "compilerProc"
  Deprecated2* = "deprecated"
  Explain2* = "explain"
  Disabled2* = "disabled"
  CppNonPod2* = "cppNonPod"
  Cppconstr2* = "cppconstr"
  Borrow2* = "borrow"
  CppCall2* = "cppCall"
  ObjcCall2* = "objcCall"
  Discardable2* = "discardable"
  Overridden2* = "overridden"
  Callsite2* = "callsite"
  GenSym2* = "genSym"
  NonReloadable2* = "nonReloadable"
  Nodestroy2* = "nodestroy"
  Cursor2* = "cursor"
  Noraises2* = "noraises"
  RaisesDefect2* = "raisesDefect"
  Noalias2* = "noalias"
  Virtual2* = "virtual"
  Member2* = "member"
  CodegenDecl2* = "codegenDecl"
  Objcheck2* = "objcheck"
  Fcheck2* = "fcheck"
  Rcheck2* = "rcheck"
  Bcheck2* = "bcheck"
  Ofcheck2* = "ofcheck"
  Nilcheck2* = "nilcheck"
  Nancheck2* = "nancheck"
  Infcheck2* = "infcheck"
  OptLineDir2* = "optLineDir"
  Optspeed2* = "optspeed"
  Optsize2* = "optsize"
  StackTrace2* = "stackTrace"
  LineTrace2* = "lineTrace"
  Profile2* = "profile"
  Quirky2* = "quirky"

proc toNodeKind*(tag: string): TNodeKind = 
  case tag
  of "err": nkError
  of "nil": nkNilLit
  of "cmd": nkCommand
  of "call": nkCall
  of "callstrlit": nkCallStrLit
  of "infix": nkInfix
  of "prefix": nkPrefix
  of "hcall": nkHiddenCallConv
  of "vv": nkExprEqExpr
  of "kv": nkExprColonExpr
  of "par": nkPar
  of "oconstr": nkObjConstr
  of "sconstr": nkCurly
  of "curlyexpr": nkCurlyExpr
  of "aconstr": nkBracket
  of "at": nkBracketExpr
  of "pragmaexpr": nkPragmaBlock
  of "dot": nkDotExpr
  of "asgn": nkAsgn
  of "fasgn": nkFastAsgn
  of "if": nkIfExpr
  of "when": nkWhenStmt
  of "while": nkWhileStmt
  of "case": nkCaseStmt
  of "for": nkForStmt
  of "discard": nkDiscardStmt
  of "brk": nkBreakStmt
  of "ret": nkReturnStmt
  of "elif": nkElifBranch
  of "else": nkElse
  of "of": nkOfBranch
  of "cast": nkCast
  of "proc": nkLambda
  of "quoted": nkAccQuoted
  of "tableconstr": nkTableConstr
  of "stmts": nkStmtList
  of "reclist": nkRecList
  of "stmtListType": nkStmtListType
  of "expr": nkStmtListExpr
  of "arglist": nkArgList
  of "block": nkBlockStmt
  of "blockexpr": nkBlockExpr
  of "blocktype": nkBlockType
  of "static": nkStaticStmt
  of "bind": nkBind
  of "mixin": nkMixinStmt
  of "addr": nkAddr
  of "typevars": nkGenericParams
  of "params": nkFormalParams
  of "importAs": nkImportAs
  of "raise": nkRaiseStmt
  of "continue": nkContinueStmt
  of "yield": nkYieldStmt
  of "func": nkFuncDef
  of "method": nkMethodDef
  of "converter": nkConverterDef
  of "macro": nkMacroDef
  of "template": nkTemplateDef
  of "iterator": nkIteratorDef
  of "except": nkExceptBranch
  of "typeof": nkTypeOfExpr
  of "fin": nkFinally
  of "try": nkTryStmt
  of "import": nkImportStmt
  of "importexcept": nkImportExceptStmt
  of "include": nkIncludeStmt
  of "export": nkExportStmt
  of "exportexcept": nkExportExceptStmt
  of "from": nkFromStmt
  of "pragmas": nkPragma
  of "asm": nkAsmStmt
  of "defer": nkDefer
  of "using": nkUsingStmt
  of "comment": nkCommentStmt
  of "object": nkObjectTy
  of "tuple": nkTupleTy
  of "concept": nkTypeClassTy
  of "stat": nkStaticTy
  of "ref": nkRefTy
  of "ptr": nkPtrTy
  of "mut": nkVarTy
  of "distinct": nkDistinctTy
  of "itert": nkIteratorTy
  of "enum": nkEnumTy
  of "tupleconstr": nkTupleConstr
  of "out": nkOutTy
  of "comesfrom": nkComesFrom
  of "dotcall": nkDotCall
  of "postfix": nkPostfix
  of "unpackdecl": nkVarTuple
  of "range": nkRange
  of "xdot": nkCheckedFieldExpr
  of "deref": nkDerefExpr
  of "do": nkDo
  of "cchoice": nkClosedSymChoice
  of "ochoice": nkOpenSymChoice
  of "hstdconv": nkHiddenStdConv
  of "hsubconv": nkHiddenSubConv
  of "conv": nkConv
  of "haddr": nkHiddenAddr
  of "hderef": nkHiddenDeref
  of "downconv": nkObjDownConv
  of "upconv": nkObjUpConv
  of "xrangef": nkChckRangeF
  of "xrange64": nkChckRange64
  of "xrange": nkChckRange
  of "tocstr": nkStringToCString
  of "tostr": nkCStringToString
  of "ofh": nkOfInherit
  of "parfor": nkParForStmt
  of "const": nkConstDef
  of "type": nkTypeDef
  of "with": nkWith
  of "without": nkWithout
  of "ro": nkConstTy
  of "proctype": nkProcTy
  of "snk": nkSinkAsgn
  of "efld": nkEnumFieldDef
  of "trpattern": nkPattern
  of "htry": nkHiddenTryStmt
  of "closure": nkClosure
  of "gotostate": nkGotoState
  of "state": nkState
  of "brstate": nkBreakState
  of "modref": nkModuleRef
  of "replay": nkReplayAction
  of "nilrod": nkNilRodNode
  else: low TNodeKind

proc toMagic*(tag: string): TMagic = 
  case tag
  of "err": mNone
  of "defined": mDefined
  of "declared": mDeclared
  of "declaredInScope": mDeclaredInScope
  of "compiles": mCompiles
  of "arrGet": mArrGet
  of "arrPut": mArrPut
  of "asgn": mAsgn
  of "low": mLow
  of "high": mHigh
  of "sizeof": mSizeOf
  of "alignof": mAlignOf
  of "offsetof": mOffsetOf
  of "typetrait": mTypeTrait
  of "is": mIs
  of "objof": mOf
  of "addr": mAddr
  of "typeOf": mTypeOf
  of "plugin": mPlugin
  of "echo": mEcho
  of "shallowCopy": mShallowCopy
  of "slurp": mSlurp
  of "staticExec": mStaticExec
  of "static": mStatic
  of "parseExpr": mParseExprToAst
  of "parseStmt": mParseStmtToAst
  of "expandToAst": mExpandToAst
  of "quote": mQuoteAst
  of "inc": mInc
  of "dec": mDec
  of "ord": mOrd
  of "new": mNew
  of "newFinalize": mNewFinalize
  of "newSeq": mNewSeq
  of "newSeqOfCap": mNewSeqOfCap
  of "len": mLengthSeq
  of "incl": mIncl
  of "excl": mExcl
  of "card": mCard
  of "chr": mChr
  of "GCref": mGCref
  of "GCunref": mGCunref
  of "add": mAddI
  of "sub": mSubI
  of "mul": mMulI
  of "div": mDivI
  of "mod": mModI
  of "succ": mSucc
  of "pred": mPred
  of "addf": mAddF64
  of "subf": mSubF64
  of "mulf": mMulF64
  of "divf": mDivF64
  of "shr": mShrI
  of "shl": mShlI
  of "ashr": mAshrI
  of "bitand": mBitandI
  of "bitor": mBitorI
  of "bitxor": mBitxorI
  of "min": mMinI
  of "max": mMaxI
  of "addu": mAddU
  of "subu": mSubU
  of "mulu": mMulU
  of "divu": mDivU
  of "modu": mModU
  of "eq": mEqI
  of "le": mLeI
  of "lt": mLtI
  of "eqf": mEqF64
  of "lef": mLeF64
  of "ltf": mLtF64
  of "leu": mLeU
  of "ltu": mLtU
  of "eqe": mEqEnum
  of "lee": mLeEnum
  of "lte": mLtEnum
  of "eqc": mEqCh
  of "lec": mLeCh
  of "ltc": mLtCh
  of "eqb": mEqB
  of "leb": mLeB
  of "ltb": mLtB
  of "eqr": mEqRef
  of "lep": mLePtr
  of "ltp": mLtPtr
  of "xor": mXor
  of "eqcs": mEqCString
  of "eqproc": mEqProc
  of "neg": mUnaryMinusI
  of "abs": mAbsI
  of "not": mNot
  of "unaryplus": mUnaryPlusI
  of "bitnot": mBitnotI
  of "unaryplusf": mUnaryPlusF64
  of "negf": mUnaryMinusF64
  of "dollarc": mCharToStr
  of "dollarb": mBoolToStr
  of "dollarcs": mCStrToStr
  of "dollarnop": mStrToStr
  of "dollare": mEnumToStr
  of "and": mAnd
  of "or": mOr
  of "implies": mImplies
  of "iff": mIff
  of "exists": mExists
  of "forall": mForall
  of "old": mOld
  of "eqs": mEqStr
  of "les": mLeStr
  of "lts": mLtStr
  of "eqset": mEqSet
  of "leset": mLeSet
  of "ltset": mLtSet
  of "mulset": mMulSet
  of "addset": mPlusSet
  of "subset": mMinusSet
  of "conc": mConStrStr
  of "slice": mSlice
  of "dotdot": mDotDot
  of "fields": mFields
  of "fieldPairs": mFieldPairs
  of "parFor": mOmpParFor
  of "addc": mAppendStrCh
  of "adds": mAppendStrStr
  of "adde": mAppendSeqElem
  of "contains": mInSet
  of "repr": mRepr
  of "exit": mExit
  of "setlens": mSetLengthStr
  of "setlenq": mSetLengthSeq
  of "isPartOf": mIsPartOf
  of "astToStr": mAstToStr
  of "parallel": mParallel
  of "swap": mSwap
  of "isnil": mIsNil
  of "arrToSeq": mArrToSeq
  of "openArrayToSeq": mOpenArrayToSeq
  of "newString": mNewString
  of "newStringOfCap": mNewStringOfCap
  of "parseBiggestFloat": mParseBiggestFloat
  of "move": mMove
  of "ensureMove": mEnsureMove
  of "wasMoved": mWasMoved
  of "dup": mDup
  of "destroy": mDestroy
  of "trace": mTrace
  of "default": mDefault
  of "unown": mUnown
  of "finished": mFinished
  of "isolate": mIsolate
  of "accessEnv": mAccessEnv
  of "accessTypeField": mAccessTypeField
  of "array": mArray
  of "oarray": mOpenArray
  of "range": mRange
  of "set": mSet
  of "seq": mSeq
  of "varargs": mVarargs
  of "ref": mRef
  of "ptr": mPtr
  of "mut": mVar
  of "distinct": mDistinct
  of "void": mVoid
  of "tuple": mTuple
  of "ordinal": mOrdinal
  of "iterable": mIterableType
  of "i": mInt
  of "u": mUInt
  of "f": mFloat
  of "bool": mBool
  of "char": mChar
  of "string": mString
  of "cstring": mCstring
  of "pointer": mPointer
  of "nil": mNil
  of "expr": mExpr
  of "stmt": mStmt
  of "typedesc": mTypeDesc
  of "nimNode": mPNimrodNode
  of "spawn": mSpawn
  of "deepcopy": mDeepCopy
  of "isMainModule": mIsMainModule
  of "compileDate": mCompileDate
  of "compileTime": mCompileTime
  of "procCall": mProcCall
  of "cpuEndian": mCpuEndian
  of "hostOS": mHostOS
  of "hostCPU": mHostCPU
  of "buildOS": mBuildOS
  of "buildCPU": mBuildCPU
  of "appType": mAppType
  of "compileOption": mCompileOption
  of "compileOptionArg": mCompileOptionArg
  of "nLen": mNLen
  of "nChild": mNChild
  of "nSetChild": mNSetChild
  of "nAdd": mNAdd
  of "nAddMultiple": mNAddMultiple
  of "nDel": mNDel
  of "nKind": mNKind
  of "nSymKind": mNSymKind
  of "nccValue": mNccValue
  of "nccInc": mNccInc
  of "ncsAdd": mNcsAdd
  of "ncsIncl": mNcsIncl
  of "ncsLen": mNcsLen
  of "ncsAt": mNcsAt
  of "nctPut": mNctPut
  of "nctLen": mNctLen
  of "nctGet": mNctGet
  of "nctHasNext": mNctHasNext
  of "nctNext": mNctNext
  of "nIntVal": mNIntVal
  of "nFloatVal": mNFloatVal
  of "nSymbol": mNSymbol
  of "nIdent": mNIdent
  of "nGetType": mNGetType
  of "nStrVal": mNStrVal
  of "nSetIntVal": mNSetIntVal
  of "nSetFloatVal": mNSetFloatVal
  of "nSetSymbol": mNSetSymbol
  of "nSetIdent": mNSetIdent
  of "nSetStrVal": mNSetStrVal
  of "nLineInfo": mNLineInfo
  of "nNewNimNode": mNNewNimNode
  of "nCopyNimNode": mNCopyNimNode
  of "nCopyNimTree": mNCopyNimTree
  of "nStrToIdent": mStrToIdent
  of "nSigHash": mNSigHash
  of "nSizeOf": mNSizeOf
  of "nBindSym": mNBindSym
  of "nCallSite": mNCallSite
  of "eqIdent": mEqIdent
  of "eqNimNode": mEqNimrodNode
  of "sameNodeType": mSameNodeType
  of "getImpl": mGetImpl
  of "nGenSym": mNGenSym
  of "nHint": mNHint
  of "nWarning": mNWarning
  of "nError": mNError
  of "instantiationInfo": mInstantiationInfo
  of "getTypeInfo": mGetTypeInfo
  of "getTypeInfoV2": mGetTypeInfoV2
  of "nimvm": mNimvm
  of "definei": mIntDefine
  of "defines": mStrDefine
  of "defineb": mBoolDefine
  of "defineg": mGenericDefine
  of "runnableExamples": mRunnableExamples
  of "exception": mException
  of "builtinType": mBuiltinType
  of "symOwner": mSymOwner
  of "uarray": mUncheckedArray
  of "getImplTransf": mGetImplTransf
  of "symIsInstantiationOf": mSymIsInstantiationOf
  of "nodeId": mNodeId
  of "privateAccess": mPrivateAccess
  of "zeroDefault": mZeroDefault
  else: low TMagic

proc inclTypeFlags*(res: var TTypeFlags; f: string) = 
  case f
  of "noside": res.incl tfNoSideEffect
  of "final": res.incl tfFinal
  of "inheritable": res.incl tfInheritable
  of "shallow": res.incl tfShallow
  of "gcsafe": res.incl tfThread
  of "bycopy": res.incl tfByCopy
  of "byref": res.incl tfByRef
  of "partial": res.incl tfPartial
  of "notnil": res.incl tfNotNil
  of "requiresInit": res.incl tfRequiresInit
  of "packed": res.incl tfPacked
  of "borrowDot": res.incl tfBorrowDot
  of "covariant": res.incl tfCovariant
  of "weakCovariant": res.incl tfWeakCovariant
  of "contravariant": res.incl tfContravariant
  of "acyclic": res.incl tfAcyclic
  of "incompleteStruct": res.incl tfIncompleteStruct
  of "completeStruct": res.incl tfCompleteStruct
  of "sendable": res.incl tfSendable

proc inclSymFlags*(res: var TSymFlags; f: string) = 
  case f
  of "global": res.incl sfGlobal
  of "importc": res.incl sfImportc
  of "exportc": res.incl sfExportc
  of "volatile": res.incl sfVolatile
  of "dirty": res.incl sfDirty
  of "statemachine": res.incl sfGoto
  of "base": res.incl sfBase
  of "custompragma": res.incl sfCustomPragma
  of "register": res.incl sfRegister
  of "pure": res.incl sfPure
  of "noside": res.incl sfNoSideEffect
  of "side": res.incl sfSideEffect
  of "noinit": res.incl sfNoInit
  of "noret": res.incl sfNoReturn
  of "compilerProc": res.incl sfCompilerProc
  of "requiresInit": res.incl sfRequiresInit
  of "deprecated": res.incl sfDeprecated
  of "explain": res.incl sfExplain
  of "disabled": res.incl sfError
  of "cppNonPod": res.incl sfCppNonPod
  of "compileTime": res.incl sfCompileTime
  of "cppconstr": res.incl sfConstructor
  of "borrow": res.incl sfBorrow
  of "cppCall": res.incl sfInfixCall
  of "objcCall": res.incl sfNamedParamCall
  of "discardable": res.incl sfDiscardable
  of "overridden": res.incl sfOverridden
  of "callsite": res.incl sfCallsite
  of "genSym": res.incl sfGenSym
  of "nonReloadable": res.incl sfNonReloadable
  of "nodestroy": res.incl sfGeneratedOp
  of "cursor": res.incl sfCursor
  of "noraises": res.incl sfNeverRaises
  of "raisesDefect": res.incl sfSystemRaisesDefect
  of "noalias": res.incl sfNoalias
  of "virtual": res.incl sfVirtual
  of "bycopy": res.incl sfByCopy
  of "member": res.incl sfMember
  of "codegenDecl": res.incl sfCodegenDecl

proc inclOptions*(res: var TOptions; f: string) = 
  case f
  of "objcheck": res.incl optObjCheck
  of "fcheck": res.incl optFieldCheck
  of "rcheck": res.incl optRangeCheck
  of "bcheck": res.incl optBoundsCheck
  of "ofcheck": res.incl optOverflowCheck
  of "nilcheck": res.incl optRefCheck
  of "nancheck": res.incl optNaNCheck
  of "infcheck": res.incl optInfCheck
  of "optLineDir": res.incl optLineDir
  of "optspeed": res.incl optOptimizeSpeed
  of "optsize": res.incl optOptimizeSize
  of "stackTrace": res.incl optStackTrace
  of "lineTrace": res.incl optLineTrace
  of "byref": res.incl optByRef
  of "profile": res.incl optProfiler
  of "quirky": res.incl optQuirky

proc toTypeKind*(tag: string): TTypeKind = 
  case tag
  of "err": tyNone
  of "bool": tyBool
  of "c": tyChar
  of "empty": tyEmpty
  of "i": tyInt
  of "u": tyUInt
  of "f": tyFloat
  of "nilt": tyNil
  of "untyped": tyUntyped
  of "typed": tyTyped
  of "typedesc": tyTypeDesc
  of "p": tyGenericParam
  of "inst": tyGenericInst
  of "invok": tyGenericInvocation
  of "ptr": tyPtr
  of "ref": tyRef
  of "mut": tyVar
  of "out": tyVar
  of "and": tyAnd
  of "or": tyOr
  of "not": tyNot
  of "typeof": tyFromExpr
  of "array": tyArray
  of "uarray": tyUncheckedArray
  of "seq": tySequence
  of "ordinal": tyOrdinal
  of "set": tySet
  of "oarray": tyOpenArray
  of "iterable": tyIterable
  of "lent": tyLent
  of "tuple": tyTuple
  of "range": tyRange
  of "proctype": tyProc
  of "varargs": tyVarargs
  of "sink": tySink
  of "owned": tyOwned
  of "void": tyVoid
  of "pointer": tyPointer
  of "str": tyString
  of "cstr": tyCstring
  of "forward": tyForward
  of "typeclass": tyBuiltInTypeClass
  of "any": tyAnything
  of "stat": tyStatic
  else: low TTypeKind
