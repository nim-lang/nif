(.nif24)

(GENERATOR Module

(COM "This grammar reflects the fact that we produce NASM code.")

(RULE :Directive (global SYMBOL (DO "nl")))

(RULE :Code (text ".section .text" (DO "nl")  SYMBOLDEF ":" (DO "nl") (ONE_OR_MANY Instruction)) (DO "nl"))
(RULE :ExternDecl (extern SYMBOLDEF (DO "nl")))

(RULE :DataValue (OR STRINGLITERAL INTLIT UINTLIT FLOATLIT))
(RULE :DataKey (OR DataValue (times INTLIT DataValue)) (DO "nl"))
(RULE :DataDecl SYMBOLDEF ":" (DO "nl") (ONE_OR_MANY (OR
  (ascii ".ascii " DataKey)
  (byte ".byte " DataKey)
  (word ".2byte " DataKey)
  (long ".4byte " DataKey)
  (quad ".8byte " DataKey)
)) (DO "nl"))

(RULE :Data (data ".section .bss" (DO "nl") (ZERO_OR_MANY DataDecl)) (DO "nl"))
(RULE :Rodata (rodata ".section .rodata" (DO "nl") (ZERO_OR_MANY DataDecl)) (DO "nl"))

(RULE :Section (OR Directive ExternDecl Code Data Rodata))

(RULE :Module (stmts ".intel_syntax noprefix" (DO "nl") (DO "nl") (ZERO_OR_MANY Section)))

(RULE :Reg (OR
  (rax) (rbx) (rcx) (rdx) (rsi) (rdi) (rbp) (rsp)
  (r8) (r9) (r10) (r11) (r12) (r13) (r14) (r15)
))

(RULE :FpReg (OR
  (xmm0) (xmm1) (xmm2) (xmm3) (xmm4) (xmm6) (xmm7) (xmm8)
  (xmm9) (xmm10) (xmm11) (xmm12) (xmm13) (xmm14) (xmm15)
))

(COM "We do not model the fact that most mem/mem instructions are invalid")

(RULE :Primary (OR
  Reg FpReg
  SYMBOL
  (rel "[rip+" SYMBOL "]")
  (fs "fs:[" SYMBOL "@TPOFF]")
  INTLIT UINTLIT
))

(RULE :Expr (OR
  Primary
  (mem1 "[" Primary "]")
  (mem2 "[" Primary "+" Primary "]")
  (mem3 "[" Primary "+" Primary "*" INTLIT "]")
  (mem4 "[" Primary "+" Primary "*" INTLIT "+" INTLIT "]")
  (byteat "BYTE PTR " Primary)
  (wordat "WORD PTR " Primary)
))

(RULE :Label SYMBOL)

(RULE :Instruction (OR
  (mov Expr ", " Expr)
  (movapd Expr ", " Expr)
  (movsd Expr ", " Expr)
  (lea Expr ", " Expr)
  (add Expr ", " Expr)
  (sub Expr ", " Expr)
  (mul Expr ", " Expr)
  (imul Expr ", " Expr)
  (div Expr ", " Expr)
  (idiv Expr ", " Expr)
  (xor Expr ", " Expr)
  (or Expr ", " Expr)
  (and Expr ", " Expr)
  (shl Expr ", " Expr)
  (shr Expr ", " Expr)
  (sal Expr ", " Expr)
  (sar Expr ", " Expr)
  (addsd Expr ", " Expr)
  (subsd Expr ", " Expr)
  (mulsd Expr ", " Expr)
  (divsd Expr ", " Expr)

  (push Expr)
  (pop Expr)
  (inc Expr)
  (dec Expr)
  (neg Expr)
  (not Expr)
  (cmp Expr ", " Expr)
  (test Expr ", " Expr)
  (call Expr)
  (lab "" SYMBOLDEF ":")
  (looplab "" SYMBOLDEF ":")

  (sete Expr)
  (seta Expr)
  (setae Expr)
  (setb Expr)
  (setbe Expr)
  (setg Expr)
  (setge Expr)
  (setl Expr)
  (setle Expr)
  (setz Expr)
  (setc Expr)
  (seto Expr)
  (sets Expr)
  (setp Expr)
  (setne Expr)
  (setna Expr)
  (setnae Expr)
  (setnb Expr)
  (setnbe Expr)
  (setng Expr)
  (setnge Expr)
  (setnl Expr)
  (setnle Expr)
  (setnz Expr)

  (jmp Label)
  (jloop "jmp" Label)
  (je Label)
  (jne Label)
  (jz Label)
  (jnz Label)
  (jg Label)
  (jng Label)
  (jge Label)
  (jnge Label)
  (ja Label)
  (jna Label)
  (jae Label)
  (jnae Label)
  (nop)
  (ret)
  (syscall)
  (comment "; " (OR IDENT SYMBOL STRINGLITERAL))
) (DO "nl"))
)
