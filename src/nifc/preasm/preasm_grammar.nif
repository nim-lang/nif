(.nif24)

(GRAMMAR Module

(RULE :IntType (i INTLIT (ZERO_OR_ONE INTLIT)))
(RULE :UIntType (u INTLIT (ZERO_OR_ONE INTLIT)))
(RULE :FloatType (f INTLIT (ZERO_OR_ONE INTLIT)))
(RULE :MemType (m INTLIT (ZERO_OR_ONE INTLIT)))
(COM "           ^ size   ^ align")
(RULE :BoolType (b))

(RULE :Type (OR IntType UIntType FloatType MemType BoolType))

(RULE :Lvalue (OR SYMBOL
             (load Type Expr)))

(COM "addscaled Type Expr Expr  is (a+i*TypeSize)")

(RULE :Call (call Type CallingConvention (OR . (varargs)) (ONE_OR_MANY Expr)))
(RULE :Expr (OR INTLIT UINTLIT FLOATLIT CHARLITERAL
         Lvalue
         (vaddr Type SYMBOL)
         (gaddr Type SYMBOL)
         (taddr Type SYMBOL)
         (not Type Expr)
         (neg Type Expr)
         (addscaled Type Expr Expr)
         (add Type Expr Expr)
         (sub Type Expr Expr)
         (mul Type Expr Expr)
         (div Type Expr Expr)
         (mod Type Expr Expr)
         (shr Type Expr Expr)
         (shl Type Expr Expr)
         (bitand Type Expr Expr)
         (bitor Type Expr Expr)
         (bitnot Type Expr Expr)
         (bitxor Type Expr Expr)
         (eq Type Expr Expr)
         (neq Type Expr Expr)
         (le Type Expr Expr)
         (lt Type Expr Expr)
         (sext Type Type Expr)
         (zext Type Type Expr)
         (fext Type Type Expr)
         (fnarrow Type Type Expr)
         (trunc Type Type Expr)
         (ftoi Type Type Expr)
         (ftou Type Type Expr)
         (itof Type Type Expr)
         (utof Type Type Expr)
         Call
))

(RULE :VarDeclCommon SYMBOLDEF VarPragmas Type)
(RULE :VarDecl (OR (var VarDeclCommon)
            (gvar VarDeclCommon)
            (tvar VarDeclCommon)))

(RULE :ConstBody (values (ONE_OR_MANY (OR SYMBOL INTLIT UINTLIT FLOATLIT CHARLITERAL))))
(RULE :ConstDecl (const SYMBOLDEF VarPragmas Type ConstBody))
(RULE :AsciizDecl (asciiz SYMBOLDEF STRINGLITERAL))
(RULE :EmitStmt (emit (ONE_OR_MANY Expr)))

(RULE :Stmt (OR Call
         VarDecl
         EmitStmt
         (asgn Type Lvalue Expr)
         (store Type Lvalue Expr)
         (lab SYMBOLDEF)
         (loop SYMBOLDEF)
         (tjmp Expr SYMBOL)
         (fjmp Expr SYMBOL)
         (jmp SYMBOL)
         (jloop SYMBOL)
         (ret Expr)))

(RULE :StmtList (stmts (ZERO_OR_MANY Stmt)))

(RULE :Param (param SYMBOLDEF ParamPragmas Type))
(RULE :Params (OR . (ZERO_OR_MANY (params Param))))

(RULE :ProcDecl (proc SYMBOLDEF Params Type ProcPragmas (OR . StmtList)))

(RULE :CallingConvention (OR (cdecl) (stdcall) (safecall) (syscall)
                      (fastcall) (thiscall) (noconv) (member)))

(RULE :Attribute (attr STRINGLITERAL))
(RULE :Identifier (OR SYMBOL IDENT))
(RULE :ProcPragma (OR CallingConvention (varargs) (was Identifier)
               (selectany) Attribute))

(RULE :ProcPragmas (OR . (pragmas (ONE_OR_MANY ProcPragma))))

(RULE :CommonPragma (OR (align INTLIT) (was Identifier) Attribute))
(RULE :VarPragma CommonPragma)
(RULE :VarPragmas (OR . (pragmas (ONE_OR_MANY VarPragma))))

(RULE :ParamPragma (OR (was Identifier) Attribute))
(RULE :ParamPragmas (OR . (pragmas (ONE_OR_MANY ParamPragma))))

(RULE :ExternDecl (imp (OR ProcDecl VarDecl ConstDecl)))
(RULE :Include (incl STRINGLITERAL))

(RULE :TopLevelConstruct (OR ExternDecl ProcDecl VarDecl ConstDecl AsciizDecl
                          Include EmitStmt))
(RULE :Module (stmts (ZERO_OR_MANY TopLevelConstruct)))
)
